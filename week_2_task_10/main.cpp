/*
 * main.cpp
 *
 *  Created on: 2 сент. 2018 г.
 *      Author: GAlekseyV
 *
 * У каждого из нас есть ежемесячные дела, каждое из которых нужно выполнять
 * в конкретный день каждого месяца: оплата счетов за электричество, абонентская
 * плата за связь и пр. Вам нужно реализовать работу со списком таких дел,
 * а именно, обработку следующих операций:
 * ADD i s
 * Добавить дело с названием s в день i.
 * NEXT
 * Закончить текущий месяц и начать новый. Если новый месяц имеет больше дней,
 * чем текущий, добавленные дни изначально не будут содержать дел. Если же в новом
 * месяце меньше дней, дела со всех удаляемых дней необходимо будет переместить на
 * последний день нового месяца.
 * Обратите внимание, что количество команд этого типа может превышать 11.
 * DUMP i
 * Вывести все дела в день i.
 * Изначально текущим месяцем считается январь. Количества дней в месяцах
 * соответствуют Григорианскому календарю с той лишь разницей, что в феврале
 * всегда 28 дней.
 * Указание
 * Для дописывания всех элементов вектора v2 в конец вектора v1 удобно
 * использовать метод insert:
 * Формат ввода
 * Сначала число операций Q, затем описания операций.
 * Названия дел s уникальны и состоят только из латинских букв,
 * цифр и символов подчёркивания. Номера дней i являются целыми числами и
 * нумеруются от 1 до размера текущего месяца.
 * Формат вывода
 * Для каждой операции типа DUMP в отдельной строке выведите количество дел
 * в соответствующий день, а затем их названия, разделяя их пробелом.
 * Порядок вывода дел в рамках каждой операции значения не имеет.
 */
#include <algorithm>
#include <iostream>
#include <vector>
#include <string>

using namespace std;
const vector<unsigned int> d_in_m = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
// Добавить дело с названием s в день day
void add(vector<vector<string>>& j, string s, unsigned int day){
    j[day - 1].push_back(s);
}

// Вывести все дела в день day
void dump(const vector<vector<string>>& j, unsigned int day){
    cout << j[day - 1].size() << " ";
    for(auto s : j[day - 1]){
        cout << s << " ";
    }
    cout << endl;
}

// Закончить текущий месяц и начать новый. Если новый месяц имеет больше дней,
// чем текущий, добавленные дни изначально не будут содержать дел. Если же в
// новом месяце меньше дней, дела со всех удаляемых дней необходимо будет переместить
// на последний день нового месяца. Обратите внимание, что количество команд этого
// типа может превышать 11.
void next(vector<vector<string>>& j, unsigned int& m){
    unsigned int next_m = (m + 1) % 12;
    if(d_in_m[next_m] > d_in_m[m]){
        j.resize(d_in_m[next_m]);
    }else if(d_in_m[next_m] < d_in_m[m]){
        for(unsigned int i = d_in_m[next_m]; i < d_in_m[m]; i++){
            j[d_in_m[next_m] - 1].insert(end(j[d_in_m[next_m] - 1]),
                    begin(j[i]), end(j[i]));
        }
        j.resize(d_in_m[next_m]);
    }
    m = next_m;
}

int main(){
    unsigned int month = 0, q, arg;
    vector<vector<string>> jobs(d_in_m[month]);
    string command, s;
    cin >> q;
    while(q > 0){
        cin >> command;
        if(command == "NEXT"){
            next(jobs, month);
        }else if(command == "DUMP"){
            cin >> arg;
            dump(jobs, arg);
        }else if(command == "ADD"){
            cin >> arg >> s;
            add(jobs, s, arg);
        }
        q--;
    }

    return 0;
}



